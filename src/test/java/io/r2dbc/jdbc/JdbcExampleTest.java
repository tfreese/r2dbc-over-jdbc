// Created: 14.06.2019
package io.r2dbc.jdbc;

import static io.r2dbc.jdbc.util.Awaits.awaitNone;
import static io.r2dbc.jdbc.util.Awaits.awaitQuery;
import static io.r2dbc.jdbc.util.Awaits.awaitUpdate;

import java.util.List;
import java.util.stream.IntStream;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.RegisterExtension;
import org.springframework.jdbc.core.JdbcOperations;

import io.r2dbc.jdbc.util.DBServerExtension;
import io.r2dbc.spi.Connection;
import io.r2dbc.spi.ConnectionFactories;
import io.r2dbc.spi.ConnectionFactory;
import io.r2dbc.spi.ConnectionFactoryOptions;
import io.r2dbc.spi.Statement;
import io.r2dbc.spi.test.TestKit;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

/**
 * @author Thomas Freese
 */
final class JdbcExampleTest
{
    /**
     *
     */
    @RegisterExtension
    static final DBServerExtension SERVER = new DBServerExtension();

    /**
     *
     */
    final ConnectionFactory connectionFactory =
            ConnectionFactories.get(ConnectionFactoryOptions.builder().option(JdbcConnectionFactoryProvider.DATASOURCE, SERVER.getDataSource()).build());

    /**
     *
     */
    @BeforeEach
    void createTable()
    {
        getJdbcOperations().execute("CREATE TABLE tbl (value INTEGER )");
        // getJdbcOperations().execute("CREATE TABLE tbl_auto (id INTEGER IDENTITY, value INTEGER);");
        getJdbcOperations().execute("CREATE TABLE tbl_auto (id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1), value INTEGER);");
        // getJdbcOperations().execute("CREATE TABLE tbl_auto (id INTEGER AUTO_INCREMENT, value INTEGER);");
    }

    /**
     *
     */
    @AfterEach
    void dropTable()
    {
        getJdbcOperations().execute("DROP TABLE tbl");
        getJdbcOperations().execute("DROP TABLE tbl_auto");
    }

    /**
     * @return {@link JdbcOperations}
     */
    public JdbcOperations getJdbcOperations()
    {
        JdbcOperations jdbcOperations = SERVER.getJdbcOperations();

        if (jdbcOperations == null)
        {
            throw new IllegalStateException("JdbcOperations not yet initialized.");
        }

        return jdbcOperations;
    }

    /**
     *
     */
    @Test
    void testBatch()
    {
        Connection connection = Mono.from(this.connectionFactory.create()).block(DBServerExtension.getSqlTimeout());

        try
        {
            // @formatter:off
            awaitUpdate(5, connection.createStatement("INSERT INTO tbl VALUES (?)")
                    .bind(0, 1).add()
                    .bind(0, 2).add()
                    .bind(0, 3).add()
                    .bind(0, 4).add()
                    .bind(0, 5).add()
                    );
            // @formatter:on
        }
        finally
        {
            awaitNone(connection.close());
        }

//        // @formatter:off
//        Mono.from(this.connectionFactory.create())
//            .flatMapMany(connection -> {
//                Statement statement = connection.createStatement("INSERT INTO tbl VALUES (?)");
//
//                IntStream.range(0, 10).forEach(i -> statement.bind(0, i).add());
//
//                return Flux.from(statement.execute())
//                        .flatMap(TestKit::extractRowsUpdated)
//                        .concatWith(TestKit.close(connection));
//            })
//            .as(StepVerifier::create)
//            .expectNext(10).as("values from insertions")
//            .verifyComplete();
//        // @formatter:on
    }

    /**
     *
     */
    @Test
    void testBatchAutoIncrement()
    {
        // @formatter:off
        Mono.from(this.connectionFactory.create())
            .flatMapMany(connection -> {
                Statement statement = connection.createStatement("INSERT INTO tbl_auto (value) VALUES (?)");

                IntStream.range(0, 10).forEach(i -> statement.bind(0, i).add());

                return Flux.from(statement.returnGeneratedValues().execute())
                        .flatMap(result -> Flux.from(result.map((row, rowMetadata) -> row.get(0, Integer.class)))
                                .collectList())
                        .concatWith(TestKit.close(connection));
            })
            .as(StepVerifier::create)
            .expectNext(List.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)).as("values from insertions")
            .verifyComplete();
        // @formatter:on
    }

    /**
     *
     */
    @Test
    void testBatchWithCommit()
    {
        Connection connection = Mono.from(this.connectionFactory.create()).block(DBServerExtension.getSqlTimeout());

        try
        {
            awaitNone(connection.beginTransaction());
            awaitUpdate(1, connection.createStatement("INSERT INTO tbl VALUES (100)"));
            awaitUpdate(3, connection.createStatement("INSERT INTO tbl VALUES (?)").bind(0, 200).add().bind(0, 300).add().bind(0, 400));
            awaitQuery(List.of(100, 200, 300, 400), row -> row.get(0, Integer.class), connection.createStatement("SELECT value FROM tbl"));
            awaitQuery(List.of(100, 200, 300, 400), row -> row.get("value", Integer.class), connection.createStatement("SELECT value FROM tbl"));
            awaitNone(connection.commitTransaction());

            awaitQuery(List.of(100, 200, 300, 400), row -> row.get(0, Integer.class), connection.createStatement("SELECT value FROM tbl"));
            awaitQuery(List.of(100, 200, 300, 400), row -> row.get("value", Integer.class), connection.createStatement("SELECT value FROM tbl"));

            awaitNone(connection.beginTransaction());
            awaitUpdate(2, connection.createStatement("DELETE FROM tbl where value < ?").bind(0, 255));
            awaitQuery(List.of(300, 400), row -> row.get(0, Integer.class), connection.createStatement("SELECT value FROM tbl"));
            awaitQuery(List.of(300, 400), row -> row.get("value", Integer.class), connection.createStatement("SELECT value FROM tbl"));
            awaitNone(connection.commitTransaction());

            awaitQuery(List.of(300, 400), row -> row.get(0, Integer.class), connection.createStatement("SELECT value FROM tbl"));
            awaitQuery(List.of(300, 400), row -> row.get("value", Integer.class), connection.createStatement("SELECT value FROM tbl"));
        }
        finally
        {
            awaitNone(connection.close());
        }

        // getJdbcOperations().execute("INSERT INTO tbl VALUES (100)");
        //
//        // @formatter:off
//        Mono.from(this.connectionFactory.create())
//            .flatMapMany(connection -> Mono.from(connection.beginTransaction())
//                    .<Object>thenMany(Flux.from(connection.createStatement("INSERT INTO tbl VALUES (?)")
//                                .bind(0, 200)
//                                .add().bind(0, 300)
//                                .add().bind(0, 400)
//                                .execute())
//                            .flatMap(TestKit::extractRowsUpdated))
//                    .concatWith(Flux.from(connection.createStatement("SELECT value FROM tbl")
//                                .execute())
//                            .flatMap(TestKit::extractColumns))
//                    .concatWith(connection.commitTransaction())
//
//
//                    .concatWith(Flux.from(connection.createStatement("SELECT value FROM tbl")
//                                .execute())
//                            .flatMap(TestKit::extractColumns))
//
//
//                    .concatWith(connection.beginTransaction())
//                    .concatWith(Flux.from(connection.createStatement("DELETE FROM tbl where value < ?")
//                                .bind(0, 255)
//                                .execute())
//                            .flatMap(TestKit::extractRowsUpdated))
//                    .concatWith(connection.commitTransaction())
//
//
//                    .concatWith(Flux.from(connection.createStatement("SELECT value FROM tbl")
//                                .execute())
//                            .flatMap(TestKit::extractColumns))
//
//                    .concatWith(TestKit.close(connection))
//            )
//            .as(StepVerifier::create)
//            .expectNext(3).as("rows inserted")
//            .expectNext(List.of(100, 200, 300, 400)).as("values from select before commit")
//            .expectNext(List.of(100, 200, 300, 400)).as("values from select after commit")
//            .expectNext(2).as("rows deleted")
//            .expectNext(List.of(300, 400)).as("values from select after delete after commit")
//            .verifyComplete()
//            ;
//       // @formatter:on
    }

    /**
     *
     */
    @Test
    void testBatchWithRollback()
    {
        Connection connection = Mono.from(this.connectionFactory.create()).block(DBServerExtension.getSqlTimeout());

        try
        {
            awaitNone(connection.beginTransaction());
            awaitUpdate(1, connection.createStatement("INSERT INTO tbl VALUES (100)"));
            awaitUpdate(3, connection.createStatement("INSERT INTO tbl VALUES (?)").bind(0, 200).add().bind(0, 300).add().bind(0, 400));
            awaitQuery(List.of(100, 200, 300, 400), row -> row.get(0, Integer.class), connection.createStatement("SELECT value FROM tbl"));
            awaitQuery(List.of(100, 200, 300, 400), row -> row.get("value", Integer.class), connection.createStatement("SELECT value FROM tbl"));
            awaitNone(connection.commitTransaction());

            awaitQuery(List.of(100, 200, 300, 400), row -> row.get(0, Integer.class), connection.createStatement("SELECT value FROM tbl"));
            awaitQuery(List.of(100, 200, 300, 400), row -> row.get("value", Integer.class), connection.createStatement("SELECT value FROM tbl"));

            awaitNone(connection.beginTransaction());
            awaitUpdate(2, connection.createStatement("DELETE FROM tbl where value < ?").bind(0, 255));
            awaitQuery(List.of(300, 400), row -> row.get(0, Integer.class), connection.createStatement("SELECT value FROM tbl"));
            awaitQuery(List.of(300, 400), row -> row.get("value", Integer.class), connection.createStatement("SELECT value FROM tbl"));
            awaitNone(connection.rollbackTransaction());

            awaitQuery(List.of(100, 200, 300, 400), row -> row.get(0, Integer.class), connection.createStatement("SELECT value FROM tbl"));
            awaitQuery(List.of(100, 200, 300, 400), row -> row.get("value", Integer.class), connection.createStatement("SELECT value FROM tbl"));
        }
        finally
        {
            awaitNone(connection.close());
        }
    }

    /**
     *
     */
    @Test
    void testDeleteBatch()
    {
        Connection connection = Mono.from(this.connectionFactory.create()).block(DBServerExtension.getSqlTimeout());

        try
        {
            awaitUpdate(5, connection.createStatement("INSERT INTO tbl VALUES (100, 200, 300, 400, 500)"));
            awaitUpdate(2, connection.createStatement("DELETE FROM tbl where value = ?").bind(0, 300).add().bind(0, 400));
            awaitQuery(List.of(100, 200, 500), row -> row.get(0, Integer.class), connection.createStatement("SELECT value FROM tbl"));
            awaitQuery(List.of(100, 200, 500), row -> row.get("value", Integer.class), connection.createStatement("SELECT value FROM tbl"));
        }
        finally
        {
            awaitNone(connection.close());
        }

        // getJdbcOperations().execute("INSERT INTO tbl VALUES (100, 200, 300, 400, 500)");
        //
//        // @formatter:off
//        Mono.from(this.connectionFactory.create())
//            .flatMapMany(connection -> Mono.from(connection.beginTransaction())
//                    .<Object>thenMany(Flux.from(connection.createStatement("DELETE FROM tbl where value < ?")
//                                .bind(0, 300)
//                                .add().bind(0, 400)
//                                .execute())
//                            .flatMap(TestKit::extractRowsUpdated))
//                    .concatWith(connection.commitTransaction())
//
//
//                    .concatWith(Flux.from(connection.createStatement("SELECT value FROM tbl")
//                                .execute())
//                            .flatMap(TestKit::extractColumns))
//
//                    .concatWith(TestKit.close(connection))
//            )
//            .as(StepVerifier::create)
//            .expectNext(3).as("rows deleted")
//            .expectNext(List.of(400, 500)).as("values from select after delete after commit")
//            .verifyComplete()
//            ;
//       // @formatter:on
    }

    /**
     *
     */
    @Test
    void testInsert()
    {
        Connection connection = Mono.from(this.connectionFactory.create()).block(DBServerExtension.getSqlTimeout());

        try
        {
            // @formatter:off
            awaitUpdate(1, connection.createStatement("INSERT INTO tbl VALUES (?)")
                    .bind(0, 1).add()
                    .add()
                    .add()
                    .add()
                    .add()
                    );
            // @formatter:on
        }
        finally
        {
            awaitNone(connection.close());
        }

//        // @formatter:off
//       Mono.from(this.connectionFactory.create())
//           .flatMapMany(connection -> {
//               Statement statement = connection.createStatement("INSERT INTO tbl VALUES (?)")
//                       .bind(0, 2)
//                       .add()
//                       .add()
//                       .add()
//                       ;
//
//               return Flux.from(statement.execute())
//                       .flatMap(TestKit::extractRowsUpdated)
//                       .concatWith(TestKit.close(connection));
//           })
//           .as(StepVerifier::create)
//           .expectNext(1).as("value from insertion")
//           .verifyComplete();
//       // @formatter:on
    }

    /**
     *
     */
    @Test
    void testSelectWithConverter()
    {
        getJdbcOperations().execute("INSERT INTO tbl VALUES (100, 200)");

        // @formatter:off
        Mono.from(this.connectionFactory.create())
            .flatMapMany(connection -> Mono.from(connection.beginTransaction())
                    .<Object>thenMany(Flux.from(connection.createStatement("SELECT value FROM tbl")
                                .execute())
                            .flatMap(result -> Flux.from(result.map((row, rowMetadata) -> row.get(0, Integer.class)))
                                    .collectList()))

                    .concatWith(Flux.from(connection.createStatement("SELECT value FROM tbl")
                                .execute())
                            .flatMap(result -> Flux.from(result.map((row, rowMetadata) -> row.get(0, String.class)))
                                    .collectList()))

                    .concatWith(Flux.from(connection.createStatement("SELECT value FROM tbl")
                                .execute())
                            .flatMap(result -> Flux.from(result.map((row, rowMetadata) -> row.get(0, Double.class)))
                                    .collectList()))

                    .concatWith(TestKit.close(connection))
            )
            .as(StepVerifier::create)
            .expectNext(List.of(100, 200)).as("value from Integer select")
            .expectNext(List.of("100", "200")).as("values from String select")
            .expectNext(List.of(100D, 200D)).as("values from Double select")
            .verifyComplete()
            ;
       // @formatter:on
    }

    /**
    *
    */
    @Test
    void testUpdate()
    {
        Connection connection = Mono.from(this.connectionFactory.create()).block(DBServerExtension.getSqlTimeout());

        try
        {
            awaitNone(connection.beginTransaction());
            awaitUpdate(1, connection.createStatement("INSERT INTO tbl VALUES (100)"));
            awaitUpdate(3, connection.createStatement("INSERT INTO tbl VALUES (?)").bind(0, 200).add().bind(0, 300).add().bind(0, 400));
            awaitQuery(List.of(100, 200, 300, 400), row -> row.get(0, Integer.class), connection.createStatement("SELECT value FROM tbl"));
            awaitQuery(List.of(100, 200, 300, 400), row -> row.get("value", Integer.class), connection.createStatement("SELECT value FROM tbl"));
            awaitNone(connection.commitTransaction());

            awaitQuery(List.of(100, 200, 300, 400), row -> row.get(0, Integer.class), connection.createStatement("SELECT value FROM tbl"));
            awaitQuery(List.of(100, 200, 300, 400), row -> row.get("value", Integer.class), connection.createStatement("SELECT value FROM tbl"));

            // @formatter:off
            awaitNone(connection.beginTransaction());
            awaitUpdate(4, connection.createStatement("UPDATE tbl set value = ? where value = ?")
                    .bind(0, 199).bind(1, 100)
                    .add().bind(0, 299).bind(1, 200)
                    .add().bind(0, 399).bind(1, 300)
                    .add().bind(0, 499).bind(1, 400)
                    );
            awaitQuery(List.of(199, 299, 399, 499), row -> row.get(0, Integer.class), connection.createStatement("SELECT value FROM tbl"));
            awaitQuery(List.of(199, 299, 399, 499), row -> row.get("value", Integer.class), connection.createStatement("SELECT value FROM tbl"));
            awaitNone(connection.commitTransaction());
            // @formatter:on

            awaitQuery(List.of(199, 299, 399, 499), row -> row.get(0, Integer.class), connection.createStatement("SELECT value FROM tbl"));
            awaitQuery(List.of(199, 299, 399, 499), row -> row.get("value", Integer.class), connection.createStatement("SELECT value FROM tbl"));
        }
        finally
        {
            awaitNone(connection.close());
        }

        // getJdbcOperations().execute("INSERT INTO tbl VALUES (100)");
        //
//        // @formatter:off
//        Mono.from(this.connectionFactory.create())
//            .flatMapMany(connection -> Mono.from(connection.beginTransaction())
//                    .<Object>thenMany(Flux.from(connection.createStatement("INSERT INTO tbl VALUES (?)")
//                                .bind(0, 200)
//                                .add().bind(0, 300)
//                                .add().bind(0, 400)
//                                .execute())
//                            .flatMap(TestKit::extractRowsUpdated))
//                    .concatWith(Flux.from(connection.createStatement("SELECT value FROM tbl")
//                                .execute())
//                            .flatMap(TestKit::extractColumns))
//                    .concatWith(connection.commitTransaction())
//
//
//                    .concatWith(Flux.from(connection.createStatement("SELECT value FROM tbl")
//                                .execute())
//                            .flatMap(TestKit::extractColumns))
//
//
//                    .concatWith(connection.beginTransaction())
//                    .concatWith(Flux.from(connection.createStatement("UPDATE tbl set value = ? where value = ?")
//                                .bind(0, 199).bind(1, 100)
//                                .add().bind(0, 299).bind(1, 200)
//                                .add().bind(0, 399).bind(1, 300)
//                                .add().bind(0, 499).bind(1, 400)
//                                .execute())
//                            .flatMap(TestKit::extractRowsUpdated))
//                    .concatWith(connection.commitTransaction())
//
//
//                    .concatWith(Flux.from(connection.createStatement("SELECT value FROM tbl")
//                                .execute())
//                            .flatMap(TestKit::extractColumns))
//
//                    .concatWith(TestKit.close(connection))
//            )
//            .as(StepVerifier::create)
//            .expectNext(3).as("rows inserted")
//            .expectNext(List.of(100, 200, 300, 400)).as("values from select before commit")
//            .expectNext(List.of(100, 200, 300, 400)).as("values from select after commit")
//            .expectNext(4).as("rows updated")
//            .expectNext(List.of(199, 299, 399, 499)).as("values from select after update after commit")
//            .verifyComplete()
//            ;
//       // @formatter:on
    }
}
