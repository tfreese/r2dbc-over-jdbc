// Created: 25.03.2021
package io.r2dbc.jdbc;

import java.util.stream.IntStream;

import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.RegisterExtension;
import org.springframework.jdbc.core.JdbcOperations;

import io.r2dbc.jdbc.codecs.DefaultCodecs;
import io.r2dbc.jdbc.util.DBServerExtension;
import io.r2dbc.spi.ConnectionFactory;
import io.r2dbc.spi.Statement;
import io.r2dbc.spi.test.TestKit;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

/**
 * @author Thomas Freese
 */
final class JdbcTestKit implements TestKit<Integer>
{
    /**
     *
     */
    private static ConnectionFactory connectionFactory;

    /**
    *
    */
    @RegisterExtension
    static final DBServerExtension SERVER = new DBServerExtension();

    /**
     * @see io.r2dbc.spi.test.TestKit#batch()
     */
    @Override
    @Test
    @Disabled("Wird nicht unterstÃ¼tzt")
    public void batch()
    {
        TestKit.super.batch();
    }

    /**
     * @see io.r2dbc.spi.test.TestKit#doGetSql(io.r2dbc.spi.test.TestKit.TestStatement)
     */
    @Override
    public String doGetSql(final TestStatement statement)
    {
        return switch (statement)
        {
            case CREATE_TABLE_AUTOGENERATED_KEY -> "CREATE TABLE test (id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY, value INTEGER)";
            case INSERT_VALUE_AUTOGENERATED_KEY -> "INSERT INTO test VALUES(100, 100)"; // Sollte komischerweise auch ohne den ID-Paramerter gehen ?!

            default -> TestKit.super.doGetSql(statement);
        };
    }

    /**
     * @see io.r2dbc.spi.test.TestKit#getConnectionFactory()
     */
    @Override
    public ConnectionFactory getConnectionFactory()
    {
        if (connectionFactory == null)
        {
            connectionFactory = new JdbcConnectionFactory(SERVER.getDataSource(), new DefaultCodecs());
        }

        return connectionFactory;
    }

    /**
     * @see io.r2dbc.spi.test.TestKit#getIdentifier(int)
     */
    @Override
    public Integer getIdentifier(final int index)
    {
        return index;
    }

    /**
     * @see io.r2dbc.spi.test.TestKit#getJdbcOperations()
     */
    @Override
    public JdbcOperations getJdbcOperations()
    {
        return SERVER.getJdbcOperations();
    }

    /**
     * @see io.r2dbc.spi.test.TestKit#getPlaceholder(int)
     */
    @Override
    public String getPlaceholder(final int index)
    {
        return "?";
    }

    /**
     * @see io.r2dbc.spi.test.TestKit#prepareStatement()
     */
    @Override
    @Test
    public void prepareStatement()
    {
        // TestKit.super.prepareStatement();

        // Der Original Testfall erwartet 10 Inserts ... bei einem Parameter ?!
        Mono.from(getConnectionFactory().create()).flatMapMany(connection -> {
            Statement statement = connection.createStatement(expand(TestStatement.INSERT_VALUE_PLACEHOLDER, getPlaceholder(0)));

            IntStream.range(0, 10).forEach(i -> TestKit.bind(statement, getIdentifier(0), i).add());

            return Flux.from(statement.execute()).flatMap(this::extractRowsUpdated).concatWith(TestKit.close(connection));
        }).as(StepVerifier::create).expectNextCount(1).as("values from insertions").verifyComplete();
    }
}