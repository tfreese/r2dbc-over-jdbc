// Created: 14.06.2019
package io.r2dbc.jdbc.clientTest;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.jdbc.core.JdbcOperations;

import io.r2dbc.client.R2dbc;
import reactor.core.publisher.Flux;
import reactor.test.StepVerifier;

/**
 * @author Thomas Freese
 */
interface R2dbcClientTest
{
    /**
     *
     */
    @BeforeEach
    default void createTable()
    {
        getJdbcOperations().execute("CREATE TABLE tbl (value INTEGER)");
        // getJdbcOperations().execute("CREATE TABLE tbl_auto (id INTEGER IDENTITY, value INTEGER)");

        getJdbcOperations()
                .execute("CREATE TABLE tbl_auto (id INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY, value INTEGER)");
    }

    /**
     *
     */
    @AfterEach
    default void dropTable()
    {
        getJdbcOperations().execute("DROP TABLE tbl");
        getJdbcOperations().execute("DROP TABLE tbl_auto");
    }

    /**
     * @return {@link JdbcOperations}
     */
    JdbcOperations getJdbcOperations();

    /**
     * @return {@link R2dbc}
     */
    R2dbc getR2dbcClient();

    /**
    *
    */
    @Test
    default void testInsert()
    {
       // @formatter:off
        getR2dbcClient().inTransaction(handle -> handle.execute("INSERT INTO tbl VALUES (?)", 200))
           .as(StepVerifier::create)
           .expectNext(1).as("value from insertion")
           .verifyComplete()
           ;
       // @formatter:on
    }

    /**
    *
    */
    @Test
    default void testInsertBatch()
    {
       // @formatter:off
        getR2dbcClient().inTransaction(handle -> handle.execute("INSERT INTO tbl VALUES (?)", 100)
               .concatWith(handle.execute("INSERT INTO tbl VALUES (?)", 200))
               .concatWith(handle.execute("INSERT INTO tbl VALUES (?)", 300))
               )
           .as(StepVerifier::create)
           .expectNext(1).as("value from insertion")
           .expectNext(1).as("value from insertion")
           .expectNext(1).as("value from insertion")
           .verifyComplete()
           ;
       // @formatter:on
    }

    /**
    *
    */
    @Test
    default void testInsertWithSelect()
    {
        // @formatter:off
        getR2dbcClient().inTransaction(handle -> handle.execute("INSERT INTO tbl VALUES (?)", 100))
            .concatWith(getR2dbcClient().inTransaction(handle -> handle.select("SELECT value FROM tbl")
                .mapResult(result -> Flux.from(result.map((row, rowMetadata) -> row.get("value", Integer.class)))))
                )
            .as(StepVerifier::create)
            .expectNext(1).as("value from insertion")
            .expectNext(100).as("value from select")
            .verifyComplete()
//            .subscribe(System.out::println)
            ;
        // @formatter:on
    }
}
